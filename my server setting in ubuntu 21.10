server setting in ubuntu 22.04

cpu : 5950x
gpu1 : GeForce 210
gpu2 : GeForce RTX 2070 (for gpu passthrough)
mainboard : ASUS TUF GAMING B550-PRO
cpu cooler : nh-d16

1. bios option
  - Load optimized default
  - PBO : Auto -> Enable
  - XMP : Auto -> Profile1

1. install openssh-server
  * select [*] in ubuntu server install process
  
1. ryzen zen3 setting for access temperature sensor
  * /etc/default/grub
    - GRUB_CMDLINE_LINUX="acpi_enforce_resources=lax"
  * /etc/modules-load.d/modules.conf
    - nct6775
    
1. (Optional) wifi-pcie setting
  $ sudo apt install network-manager
  * /etc/cloud/cloud.cfg.d/subiquity-disable-cloudinit-networking.cfg
  network:
  ethernets:
    enp9s0:
      dhcp4: true
  version: 2
  wifis:
    wlp6s0:
      optional : true
      access-points:
        "crinysus_5g":
          password: "43704370"
      dhcp4: true
  $ sudo cloud-init clean
  $ sudo cloud-init init
  $ sudo netplan apply

1. kraken x73 water cooler controller setting
  (https://github.com/liquidctl/liquidctl/blob/main/docs/kraken-x3-z3-guide.md)
  $ sudo apt install liquidctl
  $ sudo liquidctl status
  $ sudo liquidctl set pump speed 100

1. raptoreum mining setting
  $ sudo apt-get install build-essential automake libssl-dev libcurl4-openssl-dev libjansson-dev libgmp-dev zlib1g-dev libnuma-dev git
  $ cd /myopt/raptoreum
  $ wget https://github.com/WyvernTKC/cpuminer-gr-avx2/archive/refs/tags/1.2.4.1.tar.gz
  $ ./build-allarch.sh
  
1. time zone setting
  $ sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime

1. install docker
  $ sudo apt-get remove docker docker-engine docker.io containerd runc
  $ sudo apt-get update
  $ sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
  $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  $ echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  $ sudo apt-get update
  $ sudo apt-get install docker-ce docker-ce-cli containerd.io
  $ sudo docker run hello-world  
  * 컨테이너 이동/복원
    $ docker commit container_name image_name
    $ docker save image_name > image_name.tar
    $ cat image_name.tar | docker load
  * 도커 빠져나오기
    - Ctrl+p, Ctrp+q

1. install mystartup(include mining) service
  * /etc/systemd/system/mystartup.service
    [Unit]
    Description=My Start Up
    [Service]
    Type=oneshot
    ExecStart=/myopt/mystartup.sh
    [Install]
    WantedBy=basic.target
  * sudo systemctl daemon-reload
  * sudo systemctl enable mystartup.service

1. wol setting
  * check wol enabled : sudo ethtool enp6s0 | grep -i wake-on
  * manual enable wol : sudo ethtool --change enp6s0 wol g
  * wake up by linux command : wakeonlan -p 8 7C-10-C9-41-A6-67
  * install android wol app : udp / portnumber 9 (gigabyte mainboard)
  * auto enable wol or just add to mystartup.sh
    @ /etc/systemd/system/wol.service
      [Unit]
      Description=Enable Wake On Lan
      [Service]
      Type=oneshot
      ExecStart=/sbin/ethtool --change enp6s0 wol g
      [Install]
      WantedBy=basic.target
    $ sudo systemctl daemon-reload
    $ sudo systemctl enable wol.service
    
1. rtc wakeup setting
  $ sh -c "echo 0 > /sys/class/rtc/rtc0/wakealarm"
  $ sh -c "echo `date '+%s' -d '+ 1 minutes'` > /sys/class/rtc/rtc0/wakealarm"
  $ systemctl suspend
  
1. static ip setting (essential for wol) (when interface name is changed)
  $ sudo vi /etc/netplan/01-netcfg.yaml
  network:
    version: 2
    ethernets:
      enp7s0:
        dhcp4: false
        addresses: [192.168.0.2/24]
        gateway4: 192.168.0.1
        nameservers:
          addresses: [8.8.8.8, 8.8.4.4, 192.168.0.1]
      
  $ sudo netplan --debug apply

===== belows are for DOCKER (Ubuntu 20.04.3 LTS) =====

1. smbd
  $ (host) docker run -it -v /data/smb:/data/smb -p 139:139 -p 445:445 --name smb ubuntu
  $ apt install samba vim
  * /etc/samba/smb.conf
    [homes]
    browseable = no
    read only = no
    path = /data/smb
  $ adduser <username>
  $ smbpasswd -a <username>
  $ service smbd restart

1. svn (https)
  $ (host) docker run -it -v /data/svn:/data/svn -p 80:80 -p 443:443 --name svn ubuntu
  * apt install subversion apache2 libapache2-mod-svn vim
  * vi /etc/apache2/mods-available/dav_svn.conf
    - <Location /svn>
    - DAV svn
    - SVNParentPath /data/svn
    - AuthType Basic
    - AuthName "Subversion Repository"
    - AuthUserFile /data/svn/dav_svn.passwd
    - Require valid-user
    - </Location>
  * htpasswd -c /data/svn/dav_svn.passwd ruro
  * chown -R www-data:www-data /data/svn
  * a2enmod ssl
  * a2ensite default-ssl
  * service apache2 restart
  * svn 접속
    - https://192.168.0.2/svn/main
  * svn 복원
    $ svnadmin create /data/svn/main
    $ svnadmin load /data/svn/main < svn.dump
    $ chown -R www-data:www-data /data/svn
  * (Optional) vi /etc/apache2/sites-available/default-ssl.conf
    - SSLCertificateFile : 인증서위치(.crt)
    - SSLCertificateKeyFile : 개인키위치(.key)
  * (Optional-not using apache2) svn list svn+ssh://ruro@192.168.0.2/data/svn/main
  
1. cointest
  $ (host) docker run -it -v /data/tmp:/data/tmp -p 1001:22 -p 1002:3389 -p 1003:443 --name cointest img_cointest
  
1. code-server
  * curl -fsSL https://code-server.dev/install.sh | sh
  * /root/.config/code-server/config.yaml
    - bind-addr: 0.0.0.0:443
    - auth: password
    - password: '????????'
    - cert: true
  * (Optional) Allows code-server to listen on port 443
    - sudo setcap cap_net_bind_service=+ep /usr/lib/code-server/lib/node

1. code-server update
  * curl -fsSL https://code-server.dev/install.sh | sh

1. crontab setting
  ※ DOW - 0 ~ 6 ( 0 : SUN, 1 : MON ... 6 : SAT)
  * Regist (Every Friday 00:00)
    $ crontab -e
    00 00 * * 5 /root/coin_test/vscode_ws/util/dataman_week_trade.sh
  * Check status
    $ crontab -l
  * Remove
    $ crontab -r
  * Service Start
    $ service cron reload
    $ service cron restart

1. gui xrdp-xfce4 (rdp:3389)
  $ (host) sudo docker run -it -p 3389:3389 --name xrdp ubuntu
  $ apt install xrdp xfce4 xfce4-terminal firefox fonts-nanum*
    select light-dm
  $ passwd root
  $ echo "xfce4-session" > /root/.xsession
  $ service xrdp restart
  
===== belows are Sever Management Usage =====

1. disk check
  $ sudo apt-get install smartmontools
  $ sudo smartctl --all /dev/sda

===== belows are for Remote Streaming (QEMU/KVM, GPU PASSTHROUGH) =====

1. install qemu/kvm environment
  * enable cpu kvm suport in bios
    - AMD V
    - AMD IOMMU

  * check kvm supported
    $ kvm-ok
      INFO: /dev/kvm exists
      KVM acceleration can be used

  * Add current user in KVM Group and check the authority
    $ sudo adduser $(id -un) kvm
      sudo: unable to resolve host ryuNote
      Adding user `ryu' to group `kvm' ...
      Adding user ryu to group kvm
      Done.

    $ virsh list
       Id    Name                           State
      ----------------------------------------------------
      #

  * Install virt-manager(GUI KVM Manager), ovmf
    $ sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager ovmf

  * Copy OVMF bios firmware
    $ sudo cp /usr/share/OVMF/OVMF_CODE.fd /var/lib/libvirt/images/OVMF_CODE.fd
    $ sudo cp /usr/share/OVMF/OVMF_VARS.fd /var/lib/libvirt/images/OVMF_VARS.fd

1. gpu passthrough activation
  * get device ids number
    $ lspci -nn | grep NVIDIA
    
  * grub setting
    - /etc/default/group 
      GRUB_CMDLINE_LINUX_DEFAULT="video=efifb:off vfio-pci.ids=10de:2783,10de:22bc"
      (or GRUB_CMDLINE_LINUX_DEFAULT="quiet splash amd_iommu=on iommu=pt pcie_acs_override=downstream,multifunction video=efifb:off vfio-pci.ids=10de:1f02,10de:10f9,10de:1ada,10de:1adb")
    $ sudo update-grub

1. Make Window Image
  * Select UEFI OVMF_CODE_4M.fd
  * Add Video, Audio as PIC Device
  * Install windows
  * Install NVIDIA formal driver (after this, 0x43 error is resolved)
  * Install virtio driver
    https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso
  * Add XML configuration for prevent virtual machine detecting error
    <os>
	    <smbios mode='host'/>
    </os>

1. Rdp setting
  * Turn on the window remote allow setting

1. Game Streaming Server setting
  * Install Sunshine Install package
    https://github.com/LizardByte/Sunshine/releases
  * Setting account and password
  * Paring with host moonlight client program

1. RDP, sunshine port forward setting for remote access from outside network
  * run script (portmap_streaming.sh)
# parameter
TARGET=68

# enable rdp
iptables -I INPUT -p tcp -s 0.0.0.0/0 -d 192.168.0.2 --dport 43389 -j ACCEPT
iptables -I FORWARD -m tcp -p tcp -d 192.168.122.$TARGET --dport 3389 -j ACCEPT
iptables -I FORWARD -m state -p tcp -d 192.168.0.0/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT
iptables -t nat -I PREROUTING -p tcp -d 192.168.0.2 --dport 43389 -j DNAT --to-destination 192.168.122.$TARGET:3389

# enable sunshine
iptables -I INPUT -p tcp -s 0.0.0.0/0 -d 192.168.0.2 --dport 47984 -j ACCEPT
iptables -I INPUT -p udp -s 0.0.0.0/0 -d 192.168.0.2 --dport 47989 -j ACCEPT
iptables -I INPUT -p udp -s 0.0.0.0/0 -d 192.168.0.2 --dport 47998 -j ACCEPT
iptables -I INPUT -p udp -s 0.0.0.0/0 -d 192.168.0.2 --dport 47999 -j ACCEPT
iptables -I INPUT -p udp -s 0.0.0.0/0 -d 192.168.0.2 --dport 48000 -j ACCEPT
iptables -I INPUT -p udp -s 0.0.0.0/0 -d 192.168.0.2 --dport 48002 -j ACCEPT
iptables -I INPUT -p tcp -s 0.0.0.0/0 -d 192.168.0.2 --dport 48010 -j ACCEPT
iptables -I INPUT -p udp -s 0.0.0.0/0 -d 192.168.0.2 --dport 48010 -j ACCEPT

iptables -I FORWARD -m tcp -p tcp -d 192.168.122.$TARGET --dport 47984 -j ACCEPT
iptables -I FORWARD -m tcp -p tcp -d 192.168.122.$TARGET --dport 47989 -j ACCEPT
iptables -I FORWARD -m udp -p udp -d 192.168.122.$TARGET --dport 47998 -j ACCEPT
iptables -I FORWARD -m udp -p udp -d 192.168.122.$TARGET --dport 47999 -j ACCEPT
iptables -I FORWARD -m udp -p udp -d 192.168.122.$TARGET --dport 48000 -j ACCEPT
iptables -I FORWARD -m udp -p udp -d 192.168.122.$TARGET --dport 48002 -j ACCEPT
iptables -I FORWARD -m tcp -p tcp -d 192.168.122.$TARGET --dport 48010 -j ACCEPT
iptables -I FORWARD -m udp -p udp -d 192.168.122.$TARGET --dport 48010 -j ACCEPT

iptables -I FORWARD -m state -p tcp -d 192.168.0.0/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT
iptables -I FORWARD -m state -p udp -d 192.168.0.0/24 --state NEW,RELATED,ESTABLISHED -j ACCEPT

iptables -t nat -I PREROUTING -p tcp -d 192.168.0.2 --dport 47984 -j DNAT --to-destination 192.168.122.$TARGET:47984
iptables -t nat -I PREROUTING -p tcp -d 192.168.0.2 --dport 47989 -j DNAT --to-destination 192.168.122.$TARGET:47989
iptables -t nat -I PREROUTING -p udp -d 192.168.0.2 --dport 47998 -j DNAT --to-destination 192.168.122.$TARGET:47998
iptables -t nat -I PREROUTING -p udp -d 192.168.0.2 --dport 47999 -j DNAT --to-destination 192.168.122.$TARGET:47999
iptables -t nat -I PREROUTING -p udp -d 192.168.0.2 --dport 48000 -j DNAT --to-destination 192.168.122.$TARGET:48000
iptables -t nat -I PREROUTING -p udp -d 192.168.0.2 --dport 48002 -j DNAT --to-destination 192.168.122.$TARGET:48002
iptables -t nat -I PREROUTING -p tcp -d 192.168.0.2 --dport 48010 -j DNAT --to-destination 192.168.122.$TARGET:48010
iptables -t nat -I PREROUTING -p udp -d 192.168.0.2 --dport 48010 -j DNAT --to-destination 192.168.122.$TARGET:48010

1. Disable internal virt-manager monitor
  * default video to None
